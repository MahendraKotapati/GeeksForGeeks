/* https://leetcode.com/problems/reach-a-number/discuss/112968/Short-JAVA-Solution-with-Explanation */

#include <bits/stdc++.h>
using namespace std;

class Solution{

public:
    int minSteps(int D){
 
        int steps = 0,sum=0;
        D = abs(D);
        
        while(sum<D)   // 1+2+3+.........
            steps++,sum+=steps;
        
        // let diff = sum-D
        // if diff is even then we make the given D by changing sign of diff/2 to -ve in the series generated by doing so we lost diff from series ,so we gert 
        if( sum==D || (sum-D)%2==0 )
            return steps;
            
        // if diff is odd then we can't get D by changing sign of diff/2 because diff is odd but by changing we get even 
        // we need only atmost 2 steps to get diff even from here 
        steps++; 
        sum+=steps;
        
        if((sum-D)%2==0)  // afer one step
            return steps;
        
        // making 2 steps and returning answer
        return steps+1;
        
        
    }
};

int main(){
    int t;
    cin>>t;
    while(t--){
        int D;
        cin>>D;
        
        Solution ob;
        cout<<ob.minSteps(D)<<"\n";
    }
    return 0;
}  // } Driver Code Ends